resources:
  - ../../base/generic
  - route.yaml # uncomment this for SNI route

# Add a prefix to all queue manager artefacts, use a different namespace for each instance of the same queue manager i.e. dev, prd.
# adds prefix to all the field with "-name" and patches with "metadata/name"
namePrefix: qm011-

patchesStrategicMerge:
  - ./qm.yaml

# Alternative mechanism for patching
patches:
  - target:
      group: mq.ibm.com
      kind: QueueManager
    patch: |-
      - op: replace
        path: /metadata/name
        value: devqm011
# Example of changing the name of the actual QM 
  # - target:
  #     group: mq.ibm.com
  #     kind: QueueManager
  #   patch: |-
  #     - op: replace
  #       path: /spec/queueManager/name
  #       value: DQM011
#
# patches for SNI route
  - target:
      group: route.openshift.io
      kind: Route
    patch: |- # make sure your server connection channel has a unqiue name across all the namespaces (EXT.CONN.DEVQM011) because value of the host has to be unique across all the namespaces
      - op: replace
        path: /spec/host
        value: ext2e-conn2e-devqm011.chl.mq.ibm.com
  - target:
      group: route.openshift.io
      kind: Route
    patch: |-
      - op: replace
        path: /metadata/name
        value: ext-conn-devqm011-sni
  - target: 
      group: route.openshift.io
      kind: Route 
    patch: |- # make sure you add namePrefix in the value below
      - op: replace
        path: /spec/to/name
        value: qm011-devqm011-ibm-mq


# configMap generator - it will create a configMap with "key" as names of your files such as dynamic.mqsc, qm.ini and static-qm.mqsc in below example with "values" as content of those files
generatorOptions:
  disableNameSuffixHash: true
configMapGenerator:
- name: dynamic-mqsc-configmap
  behavior: create
  files:
  - dynamic.mqsc
- name: static-mqsc-configmap
  behavior: create
  files:
    - static-qm.mqsc
- name: static-ini-configmap
  behavior: create
  files:
    - qm.ini

# secret generator - it will create a secret with "key" as names of your files such as tls.crt and tls.key in below example with "values" as content of those files
generatorOptions:
 disableNameSuffixHash: true
secretGenerator:
  - name: cert
    behavior: create
    files:
      - certs/tls.crt
      - certs/tls.key
    type: kubernetes.io/tls
